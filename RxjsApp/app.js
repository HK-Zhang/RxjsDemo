"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Transformation_1 = require("./Transformation");
//let a = new OfPoc();
//let a = new doPoc();
//let a = new SwithMapPoc();
//let a = new MergeMapPoc();
//let a = new MapPoc();
//let a = new ConcatMapPoc();
//let a = new ConcatPoc();
//let a = new ForkJoinPoc();
//let a = new CombineLatestPoc();
//let a = new PairwisePoc();
//let a = new MergePoc();
//let a = new StartWithPoc();
//let a = new WithLatestFromPoc()
//let a = new FromPoc()
//let a = new FromPromisePoc()
//let a = new Poc()
//let a = new SetPoc()
//let a = new QueuePoc()
//let a = new DictionaryPoc()
//let a = new CatchPoc();
//let a = new RetryPoc();
//let a = new RetryWhenPoc();
//let a = new DebounceTimePoc();
//let a = new RxjsDistinctUntilChangedPoc();
//let a = new FilterPoc();
//let a = new TakePoc();
//let a = new TakeUntilPoc();
//let a = new SharePoc();
//let a = new BufferTimePoc();
//let a = new ScanPoc();
//let a = new CreatePoc();
//let a = new EmptyPoc();
//let a = new IntervalPoc();
//let a = new RangePoc();
//let a = new ThrowPoc();
//let a = new TimerPoc();
//let a = new EveryPoc();
//let a = new DefaultIfEmptyPoc();
//let a = new delayPoc();
//let a = new delayWhenPoc();
//let a = new letPoc();
//let a = new toPromisePoc();
//let a = new timeoutPoc();
//let a = new publishPoc();
//let a = new multicastPoc();
//let a = new bufferPoc();
//let a = new bufferCountPoc();
//let a = new bufferTogglePoc();
//let a = new bufferWhenPoc();
let a = new Transformation_1.ConcatMapToPoc();
a.test();
//# sourceMappingURL=app.js.map